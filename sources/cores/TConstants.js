/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @class ClassName
 * @classdesc Todo...
 * @example Todo...
 *
 */

/* eslint-env browser */

/**
 * A freezed javascript object used like an enum.
 * @typedef {object} Enum
 * @example
 * const Foo = Object.freeze( {
 *     Bar: 0,
 *     Baz: 1,
 *     Qux: 3
 * } )
 */

/**
 * @typedef {Enum} HttpVerb
 * @property {string} Create="PUT" - Corresponding to the create http verb for an itee server, namely "PUT".
 * @property {string} Read="POST" - Corresponding to the read http verb for an itee server, namely "POST".
 * @property {string} Update="PATCH" - Corresponding to the update http verb for an itee server, namely "PATCH".
 * @property {string} Delete="DELETE" - Corresponding to the delete http verb for an itee server, namely "DELETE".
 *
 * @constant
 * @type {HttpVerb}
 * @description HttpVerb contains the CRUD actions with corresponding http verb to request an itee server.
 * @see {@link https://en.wikipedia.org/wiki/Create,_read,_update_and_delete} for further information.
 */
export const HttpVerb = Object.freeze( {
    Create: "PUT",
    Read:   "POST",
    Update: "PATCH",
    Delete: "DELETE"
} )

/**
 * @typedef {Enum} ResponseType
 * @property {string} ArrayBuffer="arraybuffer" - The "arraybuffer" server response type.
 * @property {string} Blob="blob" - The "blob" server response type.
 * @property {string} Document="document" - The "document" server response type.
 * @property {string} Json="json" - The "json" server response type.
 * @property {string} DOMString="text" - The "text" server response type.
 * @property {string} Default="text" - The "" server response type ( equivalent to DOMString ).
 *
 * @constant
 * @type {ResponseType}
 * @description ResponseType allow to filter wich type of response is recieved from the server.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType} for further information.
 */
export const ResponseType = Object.freeze( {
    ArrayBuffer: 'arraybuffer',
    Blob:        'blob',
    Document:    'document',
    Json:        'json',
    DOMString:   'text',
    Default:     ''
} )

/**
 * @typedef {Enum} HttpStatusCode
 * @property {number} Continue=100 - Waiting for the continuation of the request.
 * @property {number} SwitchingProtocols=101 - The requester has asked the server to switch protocols and the server has agreed to do so.
 * @property {number} Processing=102 - WebDAV: Processing in progress (prevents the client from exceeding the limited waiting time).
 * @property {number} Ok=200 - Query successfully processed.
 * @property {number} Created=201 - Query successfully processed and a document was created.
 * @property {number} Accepted=202 - Query processed, but without guarantee of result.
 * @property {number} NonAuthoritativeInformation=203 - Information returned, but generated by an uncertified source.
 * @property {number} NoContent=204 - Query successfully processed but no information returned.
 * @property {number} ResetContent=205 - Query successfully processed, the current page can be cleared.
 * @property {number} PartialContent=206 - Only part of the resource has been transmitted.
 * @property {number} MultiStatus=207 - WebDAV: Multiple Response.
 * @property {number} AlreadyReported=208 - WebDAV: The document was previously sent to this collection.
 * @property {number} ContentDifferent=210 - WebDAV: The copy of the client-side resource differs from that of the server (content or properties).
 * @property {number} IMUsed=226 - The server has completed the request for the resource, and the response is a representation of the result of one or more instance manipulations applied to the
 *     current instance.
 * @property {number} MultipleChoices=300 - The requested URI refers to multiple resources.
 * @property {number} MovedPermanently=301 - Document moved permanently.
 * @property {number} Found=302 - Document moved temporarily.
 * @property {number} SeeOther=303 - The answer to this query is elsewhere.
 * @property {number} NotModified=304 - Document not modified since the last request.
 * @property {number} UseProxy=305 - The request must be re-addressed to the proxy.
 * @property {number} Unused=306 - Code used by an older version of RFC 2616, now reserved.
 * @property {number} TemporaryRedirect=307 - The request must be temporarily redirected to the specified URI.
 * @property {number} PermanentRedirect=308 - The request must be redirected permanently to the specified URI.
 * @property {number} TooManyRedirects=310 - The request must be redirected too many times, or is the victim of a redirection loop.
 * @property {number} BadRequest=400 - The syntax of the query is wrong.
 * @property {number} Unauthorized=401 - Authentication is required to access the resource.
 * @property {number} PaymentRequired=402 - Payment required to access the resource.
 * @property {number} Forbidden=403 - The server understood the request, but refuses to execute it. Unlike error 401, authenticating will not make any difference. On servers where authentication is
 *     required, this usually means that authentication has been accepted but access rights do not allow the client to access the resource.
 * @property {number} NotFound=404 - Resource not found.
 * @property {number} MethodNotAllowed=405 - Unauthorized request method.
 * @property {number} NotAcceptable=406 - The requested resource is not available in a format that would respect the "Accept" headers of the request.
 * @property {number} ProxyAuthenticationRequired=407 - Access to the authorized resource by identification with the proxy.
 * @property {number} RequestTimeOut=408 - Waiting time for an elapsed client request.
 * @property {number} Conflict=409 - The request can not be processed in the current state.
 * @property {number} Gone=410 - The resource is no longer available and no redirection address is known.
 * @property {number} LengthRequired=411 - The length of the request has not been specified.
 * @property {number} PreconditionFailed=412 - Preconditions sent by the query unverified.
 * @property {number} RequestEntityTooLarge=413 - Abandoned processing due to excessive request
 * @property {number} RequestURITooLong=414 - URI too long
 * @property {number} UnsupportedMediaType=415 - Unsupported query format for a given method and resource.
 * @property {number} RequestRangeUnsatisfiable=416 - Invalid "range" request header fields.
 * @property {number} ExpectationFailed=417 - Expected behavior and defined in the header of the unsatisfactory request.
 * @property {number} ImATeapot=418 - "I am a teapot". This code is defined in RFC 2324 dated April 1, 1998, Hyper Text Coffee Pot Control Protocol.
 * @property {number} BadMapping=421 - The request was sent to a server that is not able to produce a response (for example, because a connection has been reused).
 * @property {number} UnprocessableEntity=422 - WebDAV: The entity provided with the request is incomprehensible or incomplete.
 * @property {number} Locked=423 - WebDAV: The operation can not take place because the resource is locked.
 * @property {number} MethodFailure=424 - WebDAV: A method of the transaction failed.
 * @property {number} UnorderedCollection=425 - WebDAV RFC 3648. This code is defined in the WebDAV Advanced Collections Protocol draft , but is absent from the Web Distributed Authoring and
 *     Versioning (WebDAV) Ordered Collections Protocol.
 * @property {number} UpgradeRequired=426 - RFC 2817 The client should change protocol, for example to TLS / 1.0 .
 * @property {number} PreconditionRequired=428 - RFC 6585 The request must be conditional.
 * @property {number} TooManyRequests=429 - RFC 6585 The client has issued too many requests within a given time.
 * @property {number} RequestHeaderFieldsTooLarge=431 - RFC 6585 HTTP headers issued exceed the maximum size allowed by the server.
 * @property {number} NoResponse=444 - Indicates that the server did not return any information to the client and closed the connection.
 * @property {number} RetryWith=449 - Code defined by Microsoft . The request should be returned after performing an action.
 * @property {number} BlockedByWindowsParentalControls=450 - Code defined by Microsoft. This error is generated when Windows Parental Control tools are enabled and block access to the page.
 * @property {number} UnavailableForLegalReasons=451 - This error code indicates that the requested resource is inaccessible for legal reasons
 * @property {number} UnrecoverableError=456 - WebDAV: Fatal error.
 * @property {number} SSLCertificateError=495 - An extension of the 400 Bad Request error, used when the client provided an invalid certificate.
 * @property {number} SSLCertificateRequired=496 - An extension of the 400 Bad Request error, used when a required client certificate is not provided.
 * @property {number} HTTPRequestSentToHTTPSPort=497 - An extension of the 400 Bad Request error, used when the client sends an HTTP request to port 443 normally intended for HTTPS requests.
 * @property {number} ClientClosedRequest=499 - The client closed the connection before receiving the response. This error occurs when the processing is too long on the server side.
 * @property {number} InternalServerError=500 - Internal server error.
 * @property {number} NotImplemented=501 - Functionality claimed not supported by the server.
 * @property {number} BadGateway=502 - Wrong response sent to an intermediate server by another server.
 * @property {number} ServiceUnavailable=503 - Service temporarily unavailable or under maintenance.
 * @property {number} GatewayTimeOut=504 - Waiting time for a response from a server to an intermediate server that has elapsed.
 * @property {number} HTTPVersionNotSupported=505 - HTTP version not managed by the server.
 * @property {number} VariantAlsoNegotiates=506 - RFC 2295: Negotiation Error. Transparent content negociation.
 * @property {number} InsufficientStorage=507 - WebDAV: Insufficient space to modify properties or build the collection.
 * @property {number} LoopDetected=508 - WebDAV: Loop in a Resource Match
 * @property {number} BandwidthLimitExceeded=509 - Used by many servers to indicate a quota overrun.
 * @property {number} NotExtended=510 - RFC 2774: The request does not respect the policy for accessing extended HTTP resources.
 * @property {number} NetworkAuthenticationRequired=511 - RFC 6585: The client must authenticate to access the network. Used by captive portals to redirect clients to the authentication page.
 * @property {number} UnknownError=520 - Error 520 is used as a wildcard response when the origin server returns an unexpected result.
 * @property {number} WebServerIsDown=521 - The server has refused the connection from Cloudflare.
 * @property {number} ConnectionTimedOut=522 - Cloudflare could not negotiate a TCP handshake with the origin server.
 * @property {number} OriginIsUnreachable=523 - Cloudflare failed to reach the origin server. This can occur if DNS server name resolution fails.
 * @property {number} ATimeoutOccured=524 - Cloudflare established a TCP connection with the origin server but did not receive an HTTP response before the login timeout.
 * @property {number} SSLHandshakeFailed=525 - Cloudflare could not negotiate SSL / TLS handshake with the origin server.
 * @property {number} InvalidSSLCertificate=526 - Cloudflare could not validate the SSL certificate presented by the origin server.
 * @property {number} RailgunError=527 - Error 527 indicates that the request has timed out or failed after the WAN connection was established.
 *
 * @constant
 * @type {HttpStatusCode}
 * @description HttpStatusCode contains all http status code available to check and process correctly server response.
 * @see {@link https://en.wikipedia.org/wiki/List_of_HTTP_status_codes} for further information.
 */
export const HttpStatusCode = Object.freeze( {

    // 100
    Continue:           100,
    SwitchingProtocols: 101,
    Processing:         102,

    // 200
    Ok:                          200,
    Created:                     201,
    Accepted:                    202,
    NonAuthoritativeInformation: 203,
    NoContent:                   204,
    ResetContent:                205,
    PartialContent:              206,
    MultiStatus:                 207,
    AlreadyReported:             208,
    ContentDifferent:            210,
    IMUsed:                      226,

    // 300
    MultipleChoices:   300,
    MovedPermanently:  301,
    Found:             302,
    SeeOther:          303,
    NotModified:       304,
    UseProxy:          305,
    Unused:            306,
    TemporaryRedirect: 307,
    PermanentRedirect: 308,
    TooManyRedirects:  310,

    // 400
    BadRequest:                       400,
    Unauthorized:                     401,
    PaymentRequired:                  402,
    Forbidden:                        403,
    NotFound:                         404,
    MethodNotAllowed:                 405,
    NotAcceptable:                    406,
    ProxyAuthenticationRequired:      407,
    RequestTimeOut:                   408,
    Conflict:                         409,
    Gone:                             410,
    LengthRequired:                   411,
    PreconditionFailed:               412,
    RequestEntityTooLarge:            413,
    RequestRangeUnsatisfiable:        416,
    ExpectationFailed:                417,
    ImATeapot:                        418,
    BadMapping:                       421,
    UnprocessableEntity:              422,
    Locked:                           423,
    MethodFailure:                    424,
    UnorderedCollection:              425,
    UpgradeRequired:                  426,
    PreconditionRequired:             428,
    TooManyRequests:                  429,
    RequestHeaderFieldsTooLarge:      431,
    NoResponse:                       444,
    RetryWith:                        449,
    BlockedByWindowsParentalControls: 450,
    UnavailableForLegalReasons:       451,
    UnrecoverableError:               456,
    SSLCertificateError:              495,
    SSLCertificateRequired:           496,
    HTTPRequestSentToHTTPSPort:       497,
    ClientClosedRequest:              499,

    // 500
    InternalServerError:           500,
    NotImplemented:                501,
    BadGateway:                    502,
    ServiceUnavailable:            503,
    GatewayTimeOut:                504,
    HTTPVersionNotSupported:       505,
    VariantAlsoNegotiates:         506,
    InsufficientStorage:           507,
    LoopDetected:                  508,
    BandwidthLimitExceeded:        509,
    NotExtended:                   510,
    NetworkAuthenticationRequired: 511,
    UnknownError:                  520,
    WebServerIsDown:               521,
    ConnectionTimedOut:            522,
    OriginIsUnreachable:           523,
    ATimeoutOccured:               524,
    SSLHandshakeFailed:            525,
    InvalidSSLCertificate:         526,
    RailgunError:                  527

} )

/**
 *
 * @type {Enum} Keys
 */
export const Keys = Object.freeze( {
    BACKSPACE:            8,
    TAB:                  9,
    ENTER:                13,
    SHIFT:                16,
    CTRL:                 17,
    ALT:                  18,
    PAUSE:                19,
    CAPS_LOCK:            20,
    ESCAPE:               27,
    SPACE:                32,
    PAGE_UP:              33,
    PAGE_DOWN:            34,
    END:                  35,
    HOME:                 36,
    LEFT_ARROW:           37,
    UP_ARROW:             38,
    RIGHT_ARROW:          39,
    DOWN_ARROW:           40,
    INSERT:               45,
    DELETE:               46,
    ZERO:                 48,
    ONE:                  49,
    TWO:                  50,
    THREE:                51,
    FOUR:                 52,
    FIVE:                 53,
    SIX:                  54,
    SEVEN:                55,
    HEIGHT:               56,
    NINE:                 57,
    A:                    65,
    B:                    66,
    C:                    67,
    D:                    68,
    E:                    69,
    F:                    70,
    G:                    71,
    H:                    72,
    I:                    73,
    J:                    74,
    K:                    75,
    L:                    76,
    M:                    77,
    N:                    78,
    O:                    79,
    P:                    80,
    Q:                    81,
    R:                    82,
    S:                    83,
    T:                    84,
    U:                    85,
    V:                    86,
    W:                    87,
    X:                    88,
    Y:                    89,
    Z:                    90,
    LEFT_WINDOW_KEY:      91,
    RIGHT_WINDOW_KEY:     92,
    SELECT_KEY:           93,
    NUMPAD_0:             96,
    NUMPAD_1:             97,
    NUMPAD_2:             98,
    NUMPAD_3:             99,
    NUMPAD_4:             100,
    NUMPAD_5:             101,
    NUMPAD_6:             102,
    NUMPAD_7:             103,
    NUMPAD_8:             104,
    NUMPAD_9:             105,
    MULTIPLY:             106,
    ADD:                  107,
    SUBSTRACT:            109,
    DECIMAL_POINT:        110,
    DIVIDE:               111,
    F1:                   112,
    F2:                   113,
    F3:                   114,
    F4:                   115,
    F5:                   116,
    F6:                   117,
    F7:                   118,
    F8:                   119,
    F9:                   120,
    F10:                  121,
    F11:                  122,
    F12:                  123,
    NUM_LOCK:             144,
    SCROLL_LOCK:          145,
    SEMICOLON:            186,
    EQUAL:                187,
    COMMA:                188,
    DASH:                 189,
    PERIODE:              190,
    SLASH:                191,
    GRAVE_ACCENT:         192,
    OPEN_SQUARE_BRACKET:  219,
    BACKSLASH:            220,
    CLOSE_SQUARE_BRACKET: 221,
    SINGLE_QUOTE:         222
} )

/**
 *
 * @type {Enum} Mouse
 */
export const Mouse = Object.freeze({
    WHEEL: -1,
    LEFT: 0,
    MIDDLE: 1,
    RIGHT: 2,
})

/**
 *
 * @type {Enum} FileFormat
 */
export const FileFormat = Object.freeze( {
    Asc:  'asc',
    Dae:  'dae',
    Dbf:  'dbf',
    Fbx:  'fbx',
    Mtl:  'mtl',
    Json: 'json',
    Obj:  'obj',
    Shp:  'shp',
    Stl:  'stl',

    toString () {

        const formats = Object.values( this )
        let result    = ''
        for ( let index = 0, numberOfFormats = formats.length ; index < numberOfFormats ; index++ ) {
            result += formats[ index ]
            result += ((index === numberOfFormats - 1) ? ', ' : '.')
        }
        return result
    }
} )
